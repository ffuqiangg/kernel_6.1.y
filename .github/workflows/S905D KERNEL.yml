name: S905D KERNEL

on:
  workflow_dispatch:
    # inputs:
    #   set_kernel:
    #     description: "KERNEL: 5.4 / 5.10 / 5.15 / 5.19"
    #     required: true
    #     default: ""
    #   set_number:
    #     description: "NUMBER: 5.4.x / 5.10.x / 5.15.x / 5.19.x"
    #     required: true
    #     default: ""

env:
  TOOLCHAIN_URL: https://github.com/kissyouhunter/kernel_N1/releases/download/toolchain
  TOOLCHAIN: gcc-linaro-11.3.1-2022.06-x86_64_aarch64-linux-gnu.tar.xz
  ARMBIAN_VER: Armbian_22.08.0_Aml_s905d_jammy_5.4.205_2022.07.16

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: choose kernel
        run: |
          echo "KVER=6.1.y" >> $GITHUB_ENV
          echo "KERNEL_NUMBER=6.1.55" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@main
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install $(cat scripts/ubuntu2004-armbian-depends)
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
      - name: Clone repos
        run: |
          rm -rf kernel
          git clone https://github.com/unifreq/linux-6.1.y.git kernel
          cd kernel
          rm -f set_*
          cp $GITHUB_WORKSPACE/scripts/set_clean set_clean -v
          cp $GITHUB_WORKSPACE/scripts/set_dtb set_dtb -v
          cp $GITHUB_WORKSPACE/scripts/set_make set_make -v
          cp $GITHUB_WORKSPACE/scripts/set_menuconfig set_menuconfig -v
          cp $GITHUB_WORKSPACE/scripts/.config .config -v
          chmod 755 set_*
      - name: Installing cross compile toolchain
        run: |
          cd /opt
          sudo wget $TOOLCHAIN_URL/$TOOLCHAIN
          sudo tar -xf $TOOLCHAIN
      - name: Build Kernel  
        run: |
          cd kernel
          ./set_make
      - name: Extract Kernel
        run: |
          mv kernel/ linux-${KVER} -v && tar -zcf linux-${KVER}.tar.gz linux-${KVER}/ && rm -rf linux-${KVER}
          mkdir -p upload/${KERNEL_NUMBER} && mv linux-${KVER}.tar.gz upload -v
          cd upload
          curl -LO https://github.com/kissyouhunter/kernel_N1/releases/download/armbian/${ARMBIAN_VER}.img.gz && sync
          gzip -d ${ARMBIAN_VER}.img.gz
          loop_armbian=$(sudo losetup -P -f --show "${ARMBIAN_VER}.img")
          sudo mount ${loop_armbian}p2 /mnt/ && sudo mount ${loop_armbian}p1 /mnt/boot/
          sudo mv linux-${KVER}.tar.gz /mnt/root/linux-${KVER}.tar.gz -v
          sudo cp $GITHUB_WORKSPACE/install_kernel.sh /mnt/root/install_kernel.sh -v
          sudo chmod +x /mnt/root/install_kernel.sh
          sudo sed -i 's|n1kernel|'"$KERNEL_NUMBER"'|g' /mnt/root/install_kernel.sh
          sudo sed -i 's|kernelnumber|'"$KVER"'|g' /mnt/root/install_kernel.sh
          sudo chroot /mnt /bin/bash -c "./root/install_kernel.sh"
      - name: Organize files
        id: organize
        run: |
          sudo cp /mnt/root/boot-${KERNEL_NUMBER}-kissyouhunter.tar.gz upload/${KERNEL_NUMBER}
          sudo cp /mnt/root/dtb-amlogic-${KERNEL_NUMBER}-kissyouhunter.tar.gz upload/${KERNEL_NUMBER}
          sudo cp /mnt/root/modules-${KERNEL_NUMBER}-kissyouhunter.tar.gz upload/${KERNEL_NUMBER}
          sudo cp /mnt/root/header-${KERNEL_NUMBER}-kissyouhunter.tar.gz upload/${KERNEL_NUMBER}
          cd upload/ && tar -zcf ${KERNEL_NUMBER}.tar.gz ${KERNEL_NUMBER}
          rm -rf ${KERNEL_NUMBER} && rm -f ${ARMBIAN_VER}.img
          rm -f ${ARMBIAN_VER}.img
          echo "KERNEL=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        with:
          tag: kernel_${KERNEL_NUMBER}
          artifacts: ${{ env.KERNEL }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
      - name: Telegram notification
        run: |
          MSG="✅ 内核编译完成 *${KERNEL_NUMBER}*"
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown"
